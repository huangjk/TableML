
namespace TableML.Compiler
{

	/// <summary>
	/// Default template, for Unity + KEngine
	/// </summary>
	public class DefaultTemplate
	{
		public static string GenCodeTemplate = @"
// This file is auto generated by DataTableModuleEditor.cs!
// Don't manipulate me!
// Default Template for KEngine!

using System.Collections;
using System.Collections.Generic;
using TableML;
namespace {{ NameSpace }}
{
	/// <summary>
    /// All dataTables list here, so you can reload all dataTables manully from the list.
	/// </summary>
    public partial class DataTablesManager
    {
        private static IReloadableDataTables[] _dataTablesList;
        public static IReloadableDataTables[] DataTablesList
        {
            get
            {
                if (_dataTablesList == null)
                {
                    _dataTablesList = new IReloadableDataTables[]
                    { {% for file in Files %}
                        {{ file.ClassName }}DataTables._instance,{% endfor %}
                    };
                }
                return _dataTablesList;
            }
        }

#if UNITY_EDITOR
        [UnityEditor.MenuItem(""Window/Ash/DT/Local/Try Reload All DataTables Code"")]
#endif
	    public static void AllDataTablesReload()
	    {
	        for (var i = 0; i < DataTablesList.Length; i++)
	        {
	            var dataTables = DataTablesList[i];
                if (dataTables.Count > 0 // if never reload, ignore
#if UNITY_EDITOR
                    || !UnityEditor.EditorApplication.isPlaying // in editor and not playing, force load!
#endif
                    )
                {
                    dataTables.ReloadAll();
                }

	        }
	    }

    }

{% for file in Files %}
	/// <summary>
	/// Auto Generate for Tab File: {{ file.TabFilePaths }}
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class {{file.ClassName}}DataTables : IReloadableDataTables
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            {{ file.TabFilePaths }}
        };
        internal static {{file.ClassName}}DataTables _instance = new {{file.ClassName}}DataTables();
        Dictionary<{{ file.PrimaryKeyField.FormatType }}, {{file.ClassName}}DataTable> _dict = new Dictionary<{{ file.PrimaryKeyField.FormatType }}, {{file.ClassName}}DataTable>();

        /// <summary>
        /// Trigger delegate when reload the DataTables
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private {{file.ClassName}}DataTables()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static {{file.ClassName}}DataTables GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (DataTableModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        DataTableModule.WatchDataTable(tabFilePath, (path) =>
                        {
                            if (path.Replace(""\\"", ""/"").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                //UnityEngine.Debug.Log(""File Watcher! Reload success! -> "" + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the dataTable file: {{ file.ClassName }}, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the dataTable class : {{ file.ClassName }}, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the dataTable file: {{ file.ClassName }}
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = DataTableModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = {{ file.ClassName }}DataTable.ParsePrimaryKey(row);
                        {{file.ClassName}}DataTable dataTable;
                        if (!_dict.TryGetValue(pk, out dataTable))
                        {
                            dataTable = new {{file.ClassName}}DataTable(row);
                            _dict[dataTable.{{ file.PrimaryKeyField.Name }}] = dataTable;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format(""DuplicateKey, Class: {0}, File: {1}, Key: {2}"", this.GetType().Name, tabFilePath, pk));
                            else dataTable.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            UnityEngine.Debug.LogFormat(""Reload dataTables: {0}, Row Count: {1}, Reload Count: {2}"", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: {{ file.ClassName }}
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: {{ file.ClassName }}
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
		 
		 
        /// <summary>
        /// 获取数据表行。
        /// </summary>
        /// <param name=""id"">数据表行的PrimaryKey。</param>
        /// <returns>数据表行。</returns>
        public static {{file.ClassName}}DataTable Get({{ file.PrimaryKeyField.FormatType }} primaryKey)
        {
            {{file.ClassName}}DataTable dataTable;
            if (GetInstance()._dict.TryGetValue(primaryKey, out dataTable)) return dataTable;
            return null;
        }

        /// <summary>
        /// 检查是否存在数据表行。
        /// </summary>
        /// <param name=""primaryKey"" > 数据表行的主Key。</param>
        /// <returns>是否存在数据表行。</returns>
        public static bool HasDataRow({{ file.PrimaryKeyField.FormatType }} primaryKey)
        {
            return GetInstance()._dict.ContainsKey(primaryKey);
        }

        /// <summary>
        /// 检查是否存在数据表行。
        /// </summary>
        /// <param name=""condition"" > 要检查的条件。</param>
        /// <returns>是否存在数据表行。</returns>
        public static bool HasDataRow(System.Predicate<{{file.ClassName}}DataTable> condition)
        {
            if (condition == null)
            {
                throw new System.Exception(""Condition is invalid."");
            }

            foreach (var dataRow in GetInstance()._dict)
            {
                if (condition(dataRow.Value))
                {
                    return true;
                }
            }

            return false;
        }


        /// <summary>
        /// 获取符合条件的数据表行。
        /// </summary>
        /// <param name=""condition"" > 要检查的条件。</param>
        /// <returns>符合条件的数据表行。</returns>
        /// <remarks>当存在多个符合条件的数据表行时，仅返回第一个符合条件的数据表行。</remarks>
        public static {{file.ClassName}}DataTable GetDataRow(System.Predicate<{{file.ClassName}}DataTable> condition)
        {
            if (condition == null)
            {
                throw new System.Exception(""Condition is invalid."");
            }

            foreach (var dataRow in GetInstance()._dict)
            {
                {{file.ClassName}}DataTable dr = dataRow.Value;
                if (condition(dr))
                {
                    return dr;
                }
            }

            return null;
        }

        /// <summary>
        /// 获取所有数据表行。
        /// </summary>
        /// <returns>所有数据表行。</returns>
        public static {{file.ClassName}}DataTable[] GetAllDataRows()
        {
            int index = 0;
            {{file.ClassName}}DataTable[] allDataRows = new {{file.ClassName}}DataTable[GetInstance().Count];
            foreach (var dataRow in GetInstance()._dict)
            {
                allDataRows[index++] = dataRow.Value;
            }

            return allDataRows;
        }

        /// <summary>
        /// 获取所有符合条件的数据表行。
        /// </summary>
        /// <param name=""condition"" > 要检查的条件。</param>
        /// <returns>所有符合条件的数据表行。</returns>
        public static {{file.ClassName}}DataTable[] GetAllDataRows(System.Predicate<{{file.ClassName}}DataTable> condition)
        {
            if (condition == null)
            {
                throw new System.Exception(""Condition is invalid."");
            }

            List<{{file.ClassName}}DataTable> results = new List<{{file.ClassName}}DataTable>();
            foreach (var dataRow in GetInstance()._dict)
            {
                {{file.ClassName}}DataTable dr = dataRow.Value;
                if (condition(dr))
                {
                    results.Add(dr);
                }
            }

            return results.ToArray();
        }

        /// <summary>
        /// 获取所有排序后的数据表行。
        /// </summary>
        /// <param name=""comparison"" > 要排序的条件。</param>
        /// <returns>所有排序后的数据表行。</returns>
        public static {{file.ClassName}}DataTable[] GetAllDataRows(System.Comparison<{{file.ClassName}}DataTable> comparison)
        {
            if (comparison == null)
            {
                throw new System.Exception(""Comparison is invalid."");
            }

            List<{{file.ClassName}}DataTable> allDataRows = new List<{{file.ClassName}}DataTable>();
            foreach (var dataRow in GetInstance()._dict)
            {
                allDataRows.Add(dataRow.Value);
            }

            allDataRows.Sort(comparison);
            return allDataRows.ToArray();
        }

        /// <summary>
        /// 获取所有排序后的符合条件的数据表行。
        /// </summary>
        /// <param name=""condition"" > 要检查的条件。</param>
        /// <param name=""comparison"" > 要排序的条件。</param>
        /// <returns>所有排序后的符合条件的数据表行。</returns>
        public static {{file.ClassName}}DataTable[] GetAllDataRows(System.Predicate<{{file.ClassName}}DataTable> condition, System.Comparison<{{file.ClassName}}DataTable> comparison)
        {
            if (condition == null)
            {
                throw new System.Exception(""Condition is invalid."");
            }

            if (comparison == null)
            {
                throw new System.Exception(""Comparison is invalid."");
            }

            List<{{file.ClassName}}DataTable> results = new List<{{file.ClassName}}DataTable>();
            foreach (var dataRow in GetInstance()._dict)
            {
                {{file.ClassName}}DataTable dr = dataRow.Value;
                if (condition(dr))
                {
                    results.Add(dr);
                }
            }

            results.Sort(comparison);
            return results.ToArray();
        }
		
		
		
        // ========= CustomExtraString begin ===========
        {% if file.Extra %}{{ file.Extra }}{% endif %}
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: {{ file.TabFilePaths }}
    /// Singleton class for less memory use
	/// </summary>
	public partial class {{file.ClassName}}DataTable : TableRowFieldParser
	{
		{% for field in file.Fields %}
        /// <summary>
        /// {{ field.Comment }}
        /// </summary>
        public {{ field.FormatType }} {{ field.Name}} { get; private set;}
        {% endfor %}

        internal {{file.ClassName}}DataTable(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { {% for field in file.Fields %}
            {{ field.Name}} = row.Get_{{ field.TypeMethod }}(row.Values[{{ field.Index }}], ""{{ field.DefaultValue }}""); {% endfor %}
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name=""row""></param>
        /// <returns></returns>
        public static {{ file.PrimaryKeyField.FormatType }} ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_{{ file.PrimaryKeyField.TypeMethod }}(row.Values[{{ file.PrimaryKeyField.Index }}], ""{{ file.PrimaryKeyField.DefaultValue }}"");
            return primaryKey;
        }
	}
{% endfor %} 
}
";
	}
}
